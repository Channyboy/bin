#!/bin/bash
# quick and dirty script to mount USB storage devices (since nothing else seems to work for me)
# note: guaranteed to be riddled with bugs; use at your own risk

MOUNT_OPTS="rw,nosuid,nodev,uid=1000,gid=1000,dmask=0022,fmask=0133"

# partitions to restrict from being mounted (defined in RESTRICTED_DEF file)
# example: D_RESTRICTED="/dev/sda5 /dev/sdb2"
RESTRICTED_DEF=$HOME/bin/.dmount-restricted

if [[ ! -e $RESTRICTED_DEF ]]; then
    echo -e 'D_RESTRICTED=""\nDU_RESTRICTED=""' > $RESTRICTED_DEF
fi
source $RESTRICTED_DEF

isValid() {
    for i in "${VALID[@]}"; do
        if [[ $i == $1 ]]; then
            return 0
        fi
    done
    return 1
}

TABLE=$(sudo fdisk -l | grep "/dev/[hs]d" | grep -v "Extended")
echo -e "Available partitions:\n\n$TABLE"

echo -e "\nSelect partition to mount:\n"
PARTITIONS=$(sudo fdisk -l | grep "^/dev/[hs]d" | grep -v "Extended" | cut -d " " -f 1 | tr "\n" " ")

COUNT=0
declare -a VALID

for i in $PARTITIONS; do
    ((COUNT++))
    if [[ $(grep "$i" /etc/fstab) ]]; then
        echo -e "-)\t$i (system)"
    elif [[ $(echo $D_RESTRICTED | grep "$i") ]]; then
        echo -e "-)\t$i (restricted)"
    elif [[ $(mount | grep $i) ]]; then
        echo -e "-)\t$i (mounted)"
    else
        echo -e "$COUNT)\t$i"
        VALID=("${VALID[@]}" "$COUNT")
    fi
done
echo -e "\nq)\tquit"

echo -ne "\npartition to mount: "
read MOUNT

if [[ $MOUNT == "q" ]]; then
    exit 0
fi

isValid $MOUNT
if [[ $MOUNT -le $COUNT && $? == 0 ]]; then
    FOLDER=$(echo "$PARTITIONS" | cut -d " " -f $MOUNT | grep -o "[hs]d.*")

    sudo mkdir /media/$FOLDER && sudo mount -o $MOUNT_OPTS /dev/$FOLDER /media/$FOLDER
else
    echo "$(basename $0): error: invalid selection" > /dev/stderr
    exit 1
fi
